{
	"id": 0,
	"name": "@raycast/api",
	"kind": 0,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 78,
			"name": "ActionPanel",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 83,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 94,
							"name": "ActionPanelItem"
						}
					}
				},
				{
					"id": 84,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 86,
							"name": "ActionPanelSection"
						}
					}
				},
				{
					"id": 85,
					"name": "Submenu",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 121,
							"name": "ActionPanelSubmenu"
						}
					}
				},
				{
					"id": 82,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 79,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 80,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 81,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										81
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						83,
						84,
						85,
						82,
						79
					]
				}
			]
		},
		{
			"id": 97,
			"name": "ActionPanelItem",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 120,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 98,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 99,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 102,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 103,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 104,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						104
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 105,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 110,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 106,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 107,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 109,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														},
																														{
																															"id": 108,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																109,
																																108
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 111,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						110,
																						106,
																						111
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 100,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 116,
									"name": "onAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 117,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 118,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 119,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 112,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 113,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 115,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		},
																		{
																			"id": 114,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				115,
																				114
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 101,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										102,
										100,
										116,
										112,
										101
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						120,
						98
					]
				}
			]
		},
		{
			"id": 89,
			"name": "ActionPanelSection",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 93,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 90,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 91,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 92,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										92
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						93,
						90
					]
				}
			]
		},
		{
			"id": 124,
			"name": "ActionPanelSubmenu",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 143,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 125,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 126,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 129,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 130,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 131,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						131
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 132,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 137,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 133,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 134,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 136,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														},
																														{
																															"id": 135,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																136,
																																135
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 138,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						137,
																						133,
																						138
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 127,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 139,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 140,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 142,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		},
																		{
																			"id": 141,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				142,
																				141
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 128,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										129,
										127,
										139,
										128
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						143,
						125
					]
				}
			]
		},
		{
			"id": 168,
			"name": "Detail",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 174,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 169,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 170,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 172,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 173,
									"name": "markdown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 171,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										172,
										173,
										171
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						174,
						169
					]
				}
			]
		},
		{
			"id": 184,
			"name": "Form",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 197,
					"name": "Checkbox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 239,
							"name": "FormCheckbox"
						}
					}
				},
				{
					"id": 198,
					"name": "DatePicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 256,
							"name": "FormDatePicker"
						}
					}
				},
				{
					"id": 200,
					"name": "Dropdown",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 276,
							"name": "FormDropdown"
						}
					}
				},
				{
					"id": 202,
					"name": "DropdownItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 302,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 201,
					"name": "DropdownSection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 294,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 199,
					"name": "Separator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 272,
							"name": "FormSeparator"
						}
					}
				},
				{
					"id": 203,
					"name": "TagPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 321,
							"name": "FormTagPicker"
						}
					}
				},
				{
					"id": 204,
					"name": "TagPickerItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 339,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 196,
					"name": "TextArea",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 222,
							"name": "FormTextArea"
						}
					}
				},
				{
					"id": 195,
					"name": "TextField",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 205,
							"name": "FormTextField"
						}
					}
				},
				{
					"id": 194,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 185,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 186,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 189,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 188,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 190,
									"name": "onSubmit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 191,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 192,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 193,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 187,
									"name": "submitTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										189,
										188,
										190,
										187
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						197,
						198,
						200,
						202,
						201,
						199,
						203,
						204,
						196,
						195,
						194,
						185
					]
				}
			]
		},
		{
			"id": 242,
			"name": "FormCheckbox",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 255,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 243,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 244,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 249,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 245,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 250,
									"name": "label",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 251,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 252,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 253,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 254,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 247,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 246,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 248,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										249,
										245,
										250,
										251,
										247,
										246,
										248
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						255,
						243
					]
				}
			]
		},
		{
			"id": 259,
			"name": "FormDatePicker",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 271,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 260,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 261,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 266,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 262,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 267,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 268,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 269,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 270,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 264,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 263,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 265,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										266,
										262,
										267,
										264,
										263,
										265
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						271,
						260
					]
				}
			]
		},
		{
			"id": 279,
			"name": "FormDropdown",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 293,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 302,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 292,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 294,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 291,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 280,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 281,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 286,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 282,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 287,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 288,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 289,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 290,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 284,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 283,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 285,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										286,
										282,
										287,
										284,
										283,
										285
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						293,
						292,
						291,
						280
					]
				}
			]
		},
		{
			"id": 305,
			"name": "FormDropdownItem",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 320,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 306,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 307,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 310,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 311,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 312,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						312
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 313,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 318,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 314,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 315,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 317,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														},
																														{
																															"id": 316,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																317,
																																316
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 319,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						318,
																						314,
																						319
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 309,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 308,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										310,
										309,
										308
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						320,
						306
					]
				}
			]
		},
		{
			"id": 297,
			"name": "FormDropdownSection",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 301,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 298,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 299,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 300,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										300
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						301,
						298
					]
				}
			]
		},
		{
			"id": 274,
			"name": "FormSeparator",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 275,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						275
					]
				}
			]
		},
		{
			"id": 324,
			"name": "FormTagPicker",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 338,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 339,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 337,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 325,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 326,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 332,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 327,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 333,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 334,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 335,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 336,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 330,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 329,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 328,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 331,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										332,
										327,
										333,
										330,
										329,
										328,
										331
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						338,
						337,
						325
					]
				}
			]
		},
		{
			"id": 342,
			"name": "FormTagPickerItem",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 357,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 343,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 344,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 347,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 348,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 349,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						349
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 350,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 355,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 351,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 352,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 354,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														},
																														{
																															"id": 353,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																354,
																																353
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 356,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						355,
																						351,
																						356
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 346,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 345,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										347,
										346,
										345
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						357,
						343
					]
				}
			]
		},
		{
			"id": 225,
			"name": "FormTextArea",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 238,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 226,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 227,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 232,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 228,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 234,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 235,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 236,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 237,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 233,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 230,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 229,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 231,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										232,
										228,
										234,
										233,
										230,
										229,
										231
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						238,
						226
					]
				}
			]
		},
		{
			"id": 208,
			"name": "FormTextField",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 221,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 209,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 210,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 215,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 211,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								},
								{
									"id": 217,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 218,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 219,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 220,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 216,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 213,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 212,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 214,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										215,
										211,
										217,
										216,
										213,
										212,
										214
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						221,
						209
					]
				}
			]
		},
		{
			"id": 73,
			"name": "GlobalActionPanel",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 74,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						74
					]
				}
			]
		},
		{
			"id": 456,
			"name": "List",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 471,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 483,
							"name": "ListItem"
						}
					}
				},
				{
					"id": 472,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 473,
							"name": "ListSection"
						}
					}
				},
				{
					"id": 470,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 457,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 458,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 462,
									"name": "onSearchTextChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 463,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 464,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 465,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 466,
									"name": "onSelectionChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 467,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 468,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 469,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 460,
									"name": "searchBarPlaceholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 459,
									"name": "selectedItemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 461,
									"name": "throttle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										462,
										466,
										460,
										459,
										461
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						471,
						472,
						470,
						457
					]
				}
			]
		},
		{
			"id": 486,
			"name": "ListItem",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 504,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 487,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 488,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 492,
									"name": "accessoryTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 494,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 495,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 496,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						496
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 497,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 502,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 498,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 499,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 501,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														},
																														{
																															"id": 500,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "..."
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																501,
																																500
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 503,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						502,
																						498,
																						503
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 489,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 493,
									"name": "keywords",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 491,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 490,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										492,
										494,
										489,
										493,
										491,
										490
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						504,
						487
					]
				}
			]
		},
		{
			"id": 476,
			"name": "ListSection",
			"kind": 2,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 482,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 477,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 478,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 479,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 481,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 480,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										479,
										481,
										480
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						482,
						477
					]
				}
			]
		},
		{
			"id": 698,
			"name": "Color",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "The standard colors. Use this colors for consistency.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe colors automatically adopt to light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n return (\n <List>\n   <List.Item title=\"Blue\" icon={{ source: Icon.Circle, tintColor: Color.Blue }} />\n   <List.Item title=\"Green\" icon={{ source: Icon.Circle, tintColor: Color.Green }} />\n   <List.Item title=\"Brown\" icon={{ source: Icon.Circle, tintColor: Color.Brown }} />\n   <List.Item title=\"Magenta\" icon={{ source: Icon.Circle, tintColor: Color.Magenta }} />\n   <List.Item title=\"Orange\" icon={{ source: Icon.Circle, tintColor: Color.Orange }} />\n   <List.Item title=\"Purple\" icon={{ source: Icon.Circle, tintColor: Color.Purple }} />\n   <List.Item title=\"Red\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n   <List.Item title=\"Yellow\" icon={{ source: Icon.Circle, tintColor: Color.Yellow }} />\n   <List.Item title=\"PrimaryText\" icon={{ source: Icon.Circle, tintColor: Color.PrimaryText }} />\n   <List.Item title=\"SecondaryText\" icon={{ source: Icon.Circle, tintColor: Color.SecondaryText }} />\n </List>\n );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"children": [
				{
					"id": 699,
					"name": "Blue",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-blue\""
				},
				{
					"id": 700,
					"name": "Brown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-brown\""
				},
				{
					"id": 701,
					"name": "Green",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-green\""
				},
				{
					"id": 702,
					"name": "Magenta",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-magenta\""
				},
				{
					"id": 703,
					"name": "Orange",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-orange\""
				},
				{
					"id": 707,
					"name": "PrimaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-primary-text\""
				},
				{
					"id": 704,
					"name": "Purple",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-purple\""
				},
				{
					"id": 705,
					"name": "Red",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-red\""
				},
				{
					"id": 708,
					"name": "SecondaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-secondary-text\""
				},
				{
					"id": 706,
					"name": "Yellow",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-yellow\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						699,
						700,
						701,
						702,
						703,
						707,
						704,
						705,
						708,
						706
					]
				}
			]
		},
		{
			"id": 713,
			"name": "Icon",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "List of built-in icons that can be used for actions or list items.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 714,
					"name": "ArrowClockwise",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-clockwise-16\""
				},
				{
					"id": 715,
					"name": "ArrowRight",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-right-16\""
				},
				{
					"id": 716,
					"name": "Binoculars",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"binoculars-16\""
				},
				{
					"id": 717,
					"name": "Bubble",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"bubble-left-16\""
				},
				{
					"id": 718,
					"name": "Calendar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"calendar-16\""
				},
				{
					"id": 719,
					"name": "Checkmark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"checkmark-circle-16\""
				},
				{
					"id": 720,
					"name": "ChevronDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-down-16\""
				},
				{
					"id": 721,
					"name": "ChevronUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-up-16\""
				},
				{
					"id": 722,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"circle-16\""
				},
				{
					"id": 723,
					"name": "Clipboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-on-clipboard-16\""
				},
				{
					"id": 724,
					"name": "Clock",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"clock-16\""
				},
				{
					"id": 725,
					"name": "Desktop",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"desktopcomputer-16\""
				},
				{
					"id": 726,
					"name": "Document",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-16\""
				},
				{
					"id": 727,
					"name": "Dot",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"dot-16\""
				},
				{
					"id": 728,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-down-16\""
				},
				{
					"id": 729,
					"name": "Envelope",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"envelope-16\""
				},
				{
					"id": 730,
					"name": "ExclamationMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"exclamation-mark-triangle-16\""
				},
				{
					"id": 731,
					"name": "Eye",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-16\""
				},
				{
					"id": 732,
					"name": "EyeSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-slash-16\""
				},
				{
					"id": 733,
					"name": "Finder",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"finder-16\""
				},
				{
					"id": 734,
					"name": "Gear",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"gearshape-16\""
				},
				{
					"id": 735,
					"name": "Globe",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"globe-16\""
				},
				{
					"id": 736,
					"name": "Hammer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"hammer-16\""
				},
				{
					"id": 737,
					"name": "LevelMeter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"level-meter-16\""
				},
				{
					"id": 738,
					"name": "Link",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"link-16\""
				},
				{
					"id": 739,
					"name": "List",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"main-list-view-16\""
				},
				{
					"id": 740,
					"name": "MagnifyingGlass",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"magnifyingglass-16\""
				},
				{
					"id": 741,
					"name": "MemoryChip",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"memorychip-16\""
				},
				{
					"id": 742,
					"name": "Message",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"message-16\""
				},
				{
					"id": 743,
					"name": "Pencil",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pencil-16\""
				},
				{
					"id": 744,
					"name": "Person",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"person-crop-circle-16\""
				},
				{
					"id": 745,
					"name": "Phone",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"phone-16\""
				},
				{
					"id": 746,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pin-16\""
				},
				{
					"id": 747,
					"name": "Plus",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"plus-16\""
				},
				{
					"id": 755,
					"name": "QuestionMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"questionmark-circle-16\""
				},
				{
					"id": 748,
					"name": "Sidebar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"sidebar-right-16\""
				},
				{
					"id": 749,
					"name": "SpeakerArrowDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-down-16\""
				},
				{
					"id": 750,
					"name": "SpeakerArrowUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-up-16\""
				},
				{
					"id": 751,
					"name": "SpeakerSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-slash-16\""
				},
				{
					"id": 752,
					"name": "Star",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"star-16\""
				},
				{
					"id": 756,
					"name": "Terminal",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"terminal-16\""
				},
				{
					"id": 753,
					"name": "Text",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"text-alignleft-16\""
				},
				{
					"id": 754,
					"name": "TextDocument",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-plaintext-16\""
				},
				{
					"id": 757,
					"name": "Trash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"trash-16\""
				},
				{
					"id": 758,
					"name": "Upload",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-up-16\""
				},
				{
					"id": 759,
					"name": "Video",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"video-16\""
				},
				{
					"id": 760,
					"name": "Window",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"macwindow-16\""
				},
				{
					"id": 761,
					"name": "XmarkCircle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"xmark-circle-16\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						714,
						715,
						716,
						717,
						718,
						719,
						720,
						721,
						722,
						723,
						724,
						725,
						726,
						727,
						728,
						729,
						730,
						731,
						732,
						733,
						734,
						735,
						736,
						737,
						738,
						739,
						740,
						741,
						742,
						743,
						744,
						745,
						746,
						747,
						755,
						748,
						749,
						750,
						751,
						752,
						756,
						753,
						754,
						757,
						758,
						759,
						760,
						761
					]
				}
			]
		},
		{
			"id": 773,
			"name": "ImageMask",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Available masks that can be used to change the shape of an image.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nCan be handy to shape avatars or other items in a list.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 774,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a circle. Good to use for avatars."
					},
					"defaultValue": "\"circle\""
				},
				{
					"id": 775,
					"name": "RoundedRectangle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a rounded rectangle."
					},
					"defaultValue": "\"roundedRectangle\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						774,
						775
					]
				}
			]
		},
		{
			"id": 811,
			"name": "ToastStyle",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Defines the visual style of the Toast.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link ToastStyle.Success} for confirmations and {@link ToastStyle.Failure} for displaying errors.\nUse {@link ToastStyle.Animated} when your Toast should be shown until a process is completed.\nYou can hide it later by using {@link Toast.hide} or update the properties of an existing Toast.\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 814,
					"name": "Animated",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"ANIMATED\""
				},
				{
					"id": 813,
					"name": "Failure",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"FAILURE\""
				},
				{
					"id": 812,
					"name": "Success",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"SUCCESS\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						814,
						813,
						812
					]
				}
			]
		},
		{
			"id": 784,
			"name": "Toast",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "A Toast with a certain style, title, and message.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link showToast} as shortcut for creating and showing a Toast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastStyle } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  const toast = new Toast({ style: ToastStyle.Animated, title: \"Uploading image\" });\n  await toast.show();\n\n  await setTimeout(1000);\n\n  toast.style = ToastStyle.Success;\n  toast.title = \"Uploaded image\";\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 785,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 786,
							"name": "new Toast",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 787,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 807,
										"name": "ToastOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 784,
								"name": "Toast"
							}
						}
					]
				},
				{
					"id": 797,
					"name": "message",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 798,
							"name": "message",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"setSignature": [
						{
							"id": 799,
							"name": "message",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 800,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 789,
					"name": "style",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 790,
							"name": "style",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 811,
								"name": "ToastStyle"
							}
						}
					],
					"setSignature": [
						{
							"id": 791,
							"name": "style",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 792,
									"name": "style",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 811,
										"name": "ToastStyle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 793,
					"name": "title",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 794,
							"name": "title",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"setSignature": [
						{
							"id": 795,
							"name": "title",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 796,
									"name": "title",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 803,
					"name": "hide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 804,
							"name": "hide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the Toast.",
								"returns": "A promise that resolves when toast is hidden.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 801,
					"name": "show",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 802,
							"name": "show",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows the Toast.",
								"returns": "A promise that resolves when toast is shown.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						785
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						797,
						789,
						793
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						803,
						801
					]
				}
			]
		},
		{
			"id": 152,
			"name": "ActionPanelItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 155,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 153,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMake sure to assign each section or item a unique ID. If no ID is specified, a memoized auto-generated is used.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 156,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the item."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 154,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 157,
					"name": "onAction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "onAction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the item is selected."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						155,
						153,
						156,
						154
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						157
					]
				}
			]
		},
		{
			"id": 146,
			"name": "ActionPanelProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 147,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link ActionPanel.Item} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "reference",
						"id": 144,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 148,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed at the top of the panel"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						147,
						148
					]
				}
			]
		},
		{
			"id": 149,
			"name": "ActionPanelSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 150,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "reference",
						"id": 145,
						"name": "ActionPanelSectionChildren"
					}
				},
				{
					"id": 151,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						150,
						151
					]
				}
			]
		},
		{
			"id": 671,
			"name": "ActionPanelState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useActionPanel} hook to perform global Action Panel updates.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 672,
					"name": "update",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 673,
							"name": "update",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Updates the global Action Panel."
							},
							"parameters": [
								{
									"id": 674,
									"name": "actionPanel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 146,
														"name": "ActionPanelProps"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						672
					]
				}
			]
		},
		{
			"id": 159,
			"name": "ActionPanelSubmenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Submenu} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 164,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Items of the submenu.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\n<ActionPanel.Submenu title=\"Submenu\">\n   <ActionPanel.Item title=\"Just an action\" />\n</ActionPanel.Submenu>\n```\n"
							},
							{
								"tag": "remarks",
								"text": "\nIf {@link ActionPanelItem} elements are specified, a default section is automatically created.\\\nUse {@link ActionPanel.Submenu} as parent when specifying sub-menu's children to make code is more readable.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 144,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 162,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 160,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the submenu.\nMake sure to assign each section a unique ID or a UUID will be auto-generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 163,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 161,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for submenu."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						164,
						162,
						160,
						163,
						161
					]
				}
			]
		},
		{
			"id": 28,
			"name": "Application",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An object that represents a locally installed application on the system.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nIt can be used to open files or folders in a specific application. Use {@link getApplications} or\n{@link getDefaultApplication} to get applications that can open a specific file or folder.\n"
					}
				]
			},
			"children": [
				{
					"id": 31,
					"name": "bundleId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The bundle identifier of the application, e.g. `com.raycast.macos`."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 29,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display name of the application."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 30,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the application bundle, e.g. `/Applications/Raycast.app`,"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						31,
						29,
						30
					]
				}
			]
		},
		{
			"id": 538,
			"name": "CopyToClipboardActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link CopyToClipboardAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 539,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 541,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 542,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 540,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 543,
					"name": "onCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 544,
							"name": "onCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was copied to clipboard.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the copied content, e.g. up-rank recently copied content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 545,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						539,
						541,
						542,
						540
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						543
					]
				}
			]
		},
		{
			"id": 175,
			"name": "DetailProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Detail} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Detail\n"
					}
				]
			},
			"children": [
				{
					"id": 178,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 146,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 177,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": ""
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					}
				},
				{
					"id": 180,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 176,
					"name": "markdown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The CommonMark string to be rendered."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 179,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						178,
						177,
						180,
						176,
						179
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 642,
			"name": "Environment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about the environment the command is running in. Use the global {@link environment} object to retrieve values."
			},
			"children": [
				{
					"id": 646,
					"name": "assetsPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the assets directory of the extension.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis directory is used internally to load icons, images, and other bundled assets.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 645,
					"name": "commandName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the launched command, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 644,
					"name": "extensionName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the extension, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 648,
					"name": "isDevelopment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Indicates whether the command is a development command (vs. an installed command from the Store)."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 643,
					"name": "raycastVersion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The version of the main Raycast app"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 647,
					"name": "supportPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path for the support directory of an extension. Use it to read and write files related to your extension or command.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe directory at this path might not physically exist already. Use Node's `fs` module to make sure this directory exists before using it.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nfs.mkdirSync(ray.environment.supportPath, { recursive: true });\n```\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						646,
						645,
						644,
						648,
						643,
						647
					]
				}
			]
		},
		{
			"id": 762,
			"name": "FileIcon",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An icon as it's used in the Finder.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"File icon\" icon={{ fileIcon: __filename }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 763,
					"name": "fileIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to a file or folder to get it's icon from."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						763
					]
				}
			]
		},
		{
			"id": 401,
			"name": "FormCheckboxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Checkbox} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 407,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 403,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 402,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The label displayed on the right side of the checkbox."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 405,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 404,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 406,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 408,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 409,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 410,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						407,
						403,
						402,
						405,
						404,
						406
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						408
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "boolean"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 411,
			"name": "FormDatePickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.DatePicker} React component.\nThe default {@link FormDatePickerProps.value} of the date picker **must** be formatted according to {@link FormViewDatePicker.dateFormat}.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 416,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 412,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 414,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 413,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 415,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 417,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 418,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 419,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						416,
						412,
						414,
						413,
						415
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						417
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "reference",
							"name": "Date"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 434,
			"name": "FormDropdownItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 437,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 436,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 435,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the dropdown item.\nMake sure to assign each unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						437,
						436,
						435
					]
				}
			]
		},
		{
			"id": 421,
			"name": "FormDropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown} React component.\nThe {@link FormDropdownProps.value} here is ID ({@link FormDropdownItemProps.id}) of the default selected item.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 422,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link FormDropdownItem} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 431,
										"name": "FormDropdownSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 431,
											"name": "FormDropdownSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 434,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 434,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 427,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 423,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 425,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 424,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 426,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 428,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 429,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 430,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						422,
						427,
						423,
						425,
						424,
						426
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						428
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 431,
			"name": "FormDropdownSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 432,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 434,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 434,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 433,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						432,
						433
					]
				}
			]
		},
		{
			"id": 371,
			"name": "FormItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 376,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "Value"
					}
				},
				{
					"id": 372,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 374,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 373,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 375,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"name": "Value"
					}
				},
				{
					"id": 377,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 378,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 379,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						376,
						372,
						374,
						373,
						375
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						377
					]
				}
			],
			"typeParameter": [
				{
					"id": 380,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 358,
						"name": "FormValue"
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 381,
					"name": "FormTextFieldProps"
				},
				{
					"type": "reference",
					"id": 391,
					"name": "FormTextAreaProps"
				},
				{
					"type": "reference",
					"id": 401,
					"name": "FormCheckboxProps"
				},
				{
					"type": "reference",
					"id": 411,
					"name": "FormDatePickerProps"
				},
				{
					"type": "reference",
					"id": 421,
					"name": "FormDropdownProps"
				},
				{
					"type": "reference",
					"id": 438,
					"name": "FormTagPickerProps"
				}
			]
		},
		{
			"id": 366,
			"name": "FormProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 368,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 146,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 367,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link FormItemElement} elements of the form."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 371,
										"typeArguments": [
											{
												"type": "reference",
												"id": 358,
												"name": "FormValue"
											}
										],
										"name": "FormItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 371,
											"typeArguments": [
												{
													"type": "reference",
													"id": 358,
													"name": "FormValue"
												}
											],
											"name": "FormItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 370,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 369,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						368,
						367,
						370,
						369
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 420,
			"name": "FormSeparatorProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Separator} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			}
		},
		{
			"id": 449,
			"name": "FormTagPickerItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.FormTagPicker.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 452,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An icon to show in the token."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 451,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display title of the token."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 450,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the tag picker item.\nMake sure to assign unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						452,
						451,
						450
					]
				}
			]
		},
		{
			"id": 438,
			"name": "FormTagPickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TagPicker} React component.\nThe {@link FormTagPickerProps.value} here is the IDs ({@link FormTagPickerItemProps.id}) of the default selected items.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 439,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tag picker's items."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 449,
										"name": "FormTagPickerItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 449,
											"name": "FormTagPickerItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 445,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 441,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 440,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the token field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 443,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 442,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 444,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 446,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 447,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 448,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						439,
						445,
						441,
						440,
						443,
						442,
						444
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						446
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 391,
			"name": "FormTextAreaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextArea} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 397,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 393,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 392,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 395,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 394,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 396,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 398,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 400,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						397,
						393,
						392,
						395,
						394,
						396
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						398
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 381,
			"name": "FormTextFieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextField} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 387,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 376,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 383,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 372,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 382,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 385,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 374,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 384,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 386,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 375,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 388,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 389,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 390,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 377,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						387,
						383,
						382,
						385,
						384,
						386
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						388
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 371,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 363,
			"name": "FormValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of items in the form.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe form values you can define your own interface. Use the ID's of the form items\nas property name. See the example for more details.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  due?: Date;\n}\n\nexport default function Command() {\n  function handleSubmit(values: Values) {\n    console.log(values);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.TextField id=\"todo\" title=\"Todo\" />\n      <Form.DatePicker id=\"due\" title=\"Due Date\" />\n    </Form>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"indexSignature": {
				"id": 364,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The form value of a given item."
				},
				"parameters": [
					{
						"id": 365,
						"name": "item",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 765,
			"name": "Image",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Display different types of images, including network images or bundled assets.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\n// Built-in icon\nconst icon = Icon.Eye\n\n// Built-in icon with tint color\nconst tintedIcon = { source: Icon.Bubble, tintColor: Color.Red }\n\n// Bundled asset with circular mask\nconst avatar = { source: \"avatar.png\", mask: ImageMask.Circle }\n\n// Theme-aware icon\nconst icon = { source: { light: \"icon-light.png\", dark: \"icon-dark.png\" }}\n```\n"
					},
					{
						"tag": "remark",
						"text": "\nApply image transforms to the source, such as a `mask` or a `tintColor`.\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 767,
					"name": "mask",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ImageMask} to apply to the image."
					},
					"type": {
						"type": "reference",
						"id": 773,
						"name": "ImageMask"
					}
				},
				{
					"id": 766,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The source of the image."
					},
					"type": {
						"type": "reference",
						"id": 769,
						"name": "ImageSource"
					}
				},
				{
					"id": 768,
					"name": "tintColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ColorLike} to tint all the non-transparent pixels of the image."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						767,
						766,
						768
					]
				}
			]
		},
		{
			"id": 42,
			"name": "KeyboardShortcut",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A keyboard shortcut is defined by one or more modifier keys (command, control, etc.) and a single key equivalent (a character or special key).\nSee {@link KeyModifier} and {@link KeyEquivalent} for supported values.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ActionPanel, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail markdown=\"Let's play some games 👾\">\n      <ActionPanel title=\"Game controls\">\n        <ActionPanel.Item\n          title=\"Up\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowUp\" }}\n          onAction={() => console.log(\"Go up\")}\n        />\n        <ActionPanel.Item\n          title=\"Down\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowDown\" }}\n          onAction={() => console.log(\"Go down\")}\n        />\n        <ActionPanel.Item\n          title=\"Left\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowLeft\" }}\n          onAction={() => console.log(\"Go left\")}\n        />\n        <ActionPanel.Item\n          title=\"Right\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowRight\" }}\n          onAction={() => console.log(\"Go right\")}\n        />\n      </ActionPanel>\n    </Detail>\n  );\n}\n```\n"
					}
				]
			},
			"children": [
				{
					"id": 44,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The key of the keyboard shortcut."
					},
					"type": {
						"type": "reference",
						"id": 47,
						"name": "KeyEquivalent"
					}
				},
				{
					"id": 43,
					"name": "modifiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The modifier keys of the keyboard shortcut."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 46,
							"name": "KeyModifier"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						44,
						43
					]
				}
			]
		},
		{
			"id": 524,
			"name": "ListItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 531,
					"name": "accessoryIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed as accessory for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 528,
					"name": "accessoryTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 532,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An {@link ActionPanel} that will be updated for the selected list item."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 146,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 530,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 525,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.\nMake sure to assign each item a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 529,
					"name": "keywords",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional property used for providing additional indexable strings for search.\nWhen filtering the list in Raycast through the search bar, the keywords will be searched in addition to the title."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 527,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the main title."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 526,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The main title displayed for that item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						531,
						528,
						532,
						530,
						525,
						529,
						527,
						526
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				}
			]
		},
		{
			"id": 505,
			"name": "ListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 516,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 146,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 506,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List sections or items. If {@link ListItem} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 519,
										"name": "ListSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 519,
											"name": "ListSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 524,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 524,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 518,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 517,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				},
				{
					"id": 510,
					"name": "searchBarPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text that will be shown in the search bar.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Search value...\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 511,
					"name": "selectedItemId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Selects the item with the specified id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 512,
					"name": "throttle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Defines whether the {@link ListProps.onSearchTextChange} will be triggered on every keyboard press or with a delay for throttling the events.\nRecommended to set to `true` when using custom filtering logic with asynchronous operations (e.g. network requests).",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 513,
					"name": "onSearchTextChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 514,
							"name": "onSearchTextChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the search bar text changes.\nNote that built-in list filtering will be disabled when this callback is set."
							},
							"parameters": [
								{
									"id": 515,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 507,
					"name": "onSelectionChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 508,
							"name": "onSelectionChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the item selection in the list changes."
							},
							"parameters": [
								{
									"id": 509,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						516,
						506,
						518,
						517,
						510,
						511,
						512
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						513,
						507
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 519,
			"name": "ListSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 520,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link ListItem} elements of the section."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 524,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 524,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 521,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the section.\nMake sure to assign each section a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 523,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the title of the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 522,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						520,
						521,
						523,
						522
					]
				}
			]
		},
		{
			"id": 65,
			"name": "LocalStorageValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of local storage items.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe values you can define your own interface. Use the keys of the local storage items as property name.\n"
					}
				]
			},
			"indexSignature": {
				"id": 66,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The local storage value of a given key."
				},
				"parameters": [
					{
						"id": 67,
						"name": "key",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 683,
			"name": "Navigation",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useNavigation} hook to perform push and pop actions.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Navigation\n"
					}
				]
			},
			"children": [
				{
					"id": 687,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 688,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pop current view component from the navigation stack."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 684,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 685,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push a new view component to the navigation stack."
							},
							"parameters": [
								{
									"id": 686,
									"name": "component",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The React component to push to the navigation stack.\n"
									},
									"type": {
										"type": "reference",
										"name": "ReactNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						687,
						684
					]
				}
			]
		},
		{
			"id": 549,
			"name": "OpenActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 551,
					"name": "application",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The application name to use for opening the file.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf no application name is specified, the default application as determined by the system is used to open the\nspecified file.\n"
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"id": 28,
								"name": "Application"
							}
						]
					}
				},
				{
					"id": 553,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 554,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 550,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The file, folder or URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 552,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 555,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 556,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 557,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						551,
						553,
						554,
						550,
						552
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						555
					]
				}
			]
		},
		{
			"id": 561,
			"name": "OpenInBrowserActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenInBrowserAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 564,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Globe}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 565,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the menu item"
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 563,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 562,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 566,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 567,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the URL was opened in the browser.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the opened link, e.g. store a history of visited links.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 568,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						564,
						565,
						563,
						562
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						566
					]
				}
			]
		},
		{
			"id": 572,
			"name": "OpenWithActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenWithAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 575,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Upload}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 573,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 576,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 574,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Open With\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 577,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 578,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 579,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						575,
						573,
						576,
						574
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						577
					]
				}
			]
		},
		{
			"id": 583,
			"name": "PasteActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PasteAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 584,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 586,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 587,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 585,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 588,
					"name": "onPaste",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 589,
							"name": "onPaste",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was pasted into the front-most application.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pasted content, e.g. up-rank recently pasted content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 590,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						584,
						586,
						587,
						585
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						588
					]
				}
			]
		},
		{
			"id": 654,
			"name": "Preference",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about a single preference item (entered in Raycast Preferences). Use the {@link getPreferenceValues}\nfunction or the global {@link preferences} object to retrieve values.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe object maps to a defined preference in the `package.json` manifest file.\n"
					}
				]
			},
			"children": [
				{
					"id": 664,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The data that is used for dropdowns."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "unknown"
						}
					}
				},
				{
					"id": 661,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the preference if there is no `value` specified."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				},
				{
					"id": 659,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The description of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe description is shown in the Raycast preferences as well as in the\nonboarding view for required preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 663,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A label that is used for checkboxes."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 655,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 662,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A placeholder that is used for text fields and passwords."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 657,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Specifies if the preference is required.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf the preference is required, an onboarding view is shown when the\nextension is opened for the first time.\n"
							},
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 658,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe title is also shown in the Raycast preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 656,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The type of the preference."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "textfield"
							},
							{
								"type": "literal",
								"value": "password"
							},
							{
								"type": "literal",
								"value": "checkbox"
							},
							{
								"type": "literal",
								"value": "dropdown"
							}
						]
					}
				},
				{
					"id": 660,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The value of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						664,
						661,
						659,
						663,
						655,
						662,
						657,
						658,
						656,
						660
					]
				}
			]
		},
		{
			"id": 666,
			"name": "PreferenceValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of preference items."
			},
			"indexSignature": {
				"id": 667,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 668,
						"name": "name",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 594,
			"name": "PushActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PushAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 597,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 598,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 596,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The target view that will be pushed to the navigation stack."
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 595,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 599,
					"name": "onPush",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 600,
							"name": "onPush",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the target view was pushed.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pushed target view, e.g. uprank a selected list item.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						597,
						598,
						596,
						595
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						599
					]
				}
			]
		},
		{
			"id": 604,
			"name": "ShowInFinderActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ShowInFinderAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 607,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 605,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "reference",
						"name": "PathLike"
					}
				},
				{
					"id": 608,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 606,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Show in Finder\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 609,
					"name": "onShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 610,
							"name": "onShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was shown in the Finder.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on revealed files or folders, e.g. up-rank recently opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 611,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "PathLike"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						607,
						605,
						608,
						606
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						609
					]
				}
			]
		},
		{
			"id": 616,
			"name": "SubmitFormActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link SubmitFormAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 618,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 619,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 617,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 620,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 621,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the submit was submitted.\nUse the handler to perform custom validation logic and call other Raycast API methods.\nThe handler receives a the values object containing the user input."
							},
							"parameters": [
								{
									"id": 622,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Values"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						618,
						619,
						617
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						620
					]
				}
			],
			"typeParameter": [
				{
					"id": 623,
					"name": "Values",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			]
		},
		{
			"id": 807,
			"name": "ToastOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The options to create a {@link Toast}.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastOptions, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const options: ToastOptions = {\n    style: ToastStyle.Success,\n    title: \"Finished cooking\",\n    message: \"Delicious pasta for lunch\",\n  };\n  const toast = new Toast(options);\n  await toast.show();\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 810,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional message for the toast. Useful to show more information, e.g. an identifier of a newly create asset"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 808,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The style of a toast."
					},
					"type": {
						"type": "reference",
						"id": 811,
						"name": "ToastStyle"
					}
				},
				{
					"id": 809,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of a toast. Displayed on the top."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						810,
						808,
						809
					]
				}
			]
		},
		{
			"id": 627,
			"name": "TrashActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link TrashAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 630,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Trash}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 764,
						"name": "ImageLike"
					}
				},
				{
					"id": 628,
					"name": "paths",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The item or items to move to the trash."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "PathLike"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PathLike"
								}
							}
						]
					}
				},
				{
					"id": 631,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 629,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Move to Trash\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 632,
					"name": "onTrash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 633,
							"name": "onTrash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when all items were moved to the trash.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on a trashed item, e.g. update a list.\nThe callback returns the same `paths` as passed originally.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 634,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "PathLike"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PathLike"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						630,
						628,
						631,
						629
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						632
					]
				}
			]
		},
		{
			"id": 144,
			"name": "ActionPanelChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanel} and {@link ActionPanelSubmenu} components.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 149,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 149,
									"name": "ActionPanelSectionProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"id": 145,
						"name": "ActionPanelSectionChildren"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 145,
			"name": "ActionPanelSectionChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanelSection} component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 152,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 152,
									"name": "ActionPanelItemProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 159,
								"name": "ActionPanelSubmenuProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 159,
									"name": "ActionPanelSubmenuProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 709,
			"name": "ColorLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported color types.",
				"tags": [
					{
						"tag": "remark",
						"text": "\nBesides the {@link Color}, you can use any of the following color formats:\n- HEX, e.g `#FF0000`\n- Short HEX, e.g. `#F00`\n- RGBA, e.g. `rgb(255, 0, 0)`\n- RGBA Percentage, e.g. `rgb(255, 0, 0, 1.0)`\n- HSL, e.g. `hsla(200, 20%, 33%, 0.2)`\n- Keywords, e.g. `red`\n\nColors different to the built-in ones (see {@link Color}) will be dynamically adjusted to fit the contrast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Built-in color\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      <List.Item title=\"HEX\" icon={{ source: Icon.Circle, tintColor: \"#FF0000\" }} />\n      <List.Item title=\"Short HEX\" icon={{ source: Icon.Circle, tintColor: \"#F00\" }} />\n      <List.Item title=\"RGBA\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0)\" }} />\n      <List.Item title=\"RGBA Percentage\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0, 1.0)\" }} />\n      <List.Item title=\"HSL\" icon={{ source: Icon.Circle, tintColor: \"hsla(200, 20%, 33%, 0.2)\" }} />\n      <List.Item title=\"Keywords\" icon={{ source: Icon.Circle, tintColor: \"red\" }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 698,
						"name": "Color"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 358,
			"name": "FormValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A possible form item value that will be used as an input for the submit callback of a form.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 764,
			"name": "ImageLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported image types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon=\"https://raycast.com/uploads/avatar.png\" />\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n      <List.Item title=\"FileIcon\" icon={{ fileIcon: __filename }} />\n      <List.Item title=\"Image\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 713,
						"name": "Icon"
					},
					{
						"type": "reference",
						"id": 762,
						"name": "FileIcon"
					},
					{
						"type": "reference",
						"id": 765,
						"name": "Image"
					}
				]
			}
		},
		{
			"id": 769,
			"name": "ImageSource",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The source of an {@link Image}. Can be either a remote URL, a local file resource, a built-in {@link Icon} or\na single emoji.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor consistency, it's best to use the built-in {@link Icon} in lists, the Action Panel and other places. If a\nspecific icon isn't built-in, you can reference custom ones from the `assets` folder of the extension by file name,\ne.g. `my-icon.png`. Alternatively, you can reference an absolute HTTPS url that points to an image or use an emoji.\nYou can also specify different remote or local assets for light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon={{ source: \"https://raycast.com/uploads/avatar.png\" }} />\n      <List.Item title=\"Icon\" icon={{ source: Icon.Circle }} />\n      <List.Item\n        title=\"Theme\"\n        icon={{\n          source: { light: \"https://raycast.com/uploads/avatar.png\", dark: \"https://raycast.com/uploads/avatar.png\" },\n        }}\n      />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 713,
						"name": "Icon"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 770,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 772,
									"name": "dark",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 771,
									"name": "light",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										772,
										771
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 47,
			"name": "KeyEquivalent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "KeyEquivalent of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "a"
					},
					{
						"type": "literal",
						"value": "b"
					},
					{
						"type": "literal",
						"value": "c"
					},
					{
						"type": "literal",
						"value": "d"
					},
					{
						"type": "literal",
						"value": "e"
					},
					{
						"type": "literal",
						"value": "f"
					},
					{
						"type": "literal",
						"value": "g"
					},
					{
						"type": "literal",
						"value": "h"
					},
					{
						"type": "literal",
						"value": "i"
					},
					{
						"type": "literal",
						"value": "j"
					},
					{
						"type": "literal",
						"value": "k"
					},
					{
						"type": "literal",
						"value": "l"
					},
					{
						"type": "literal",
						"value": "m"
					},
					{
						"type": "literal",
						"value": "n"
					},
					{
						"type": "literal",
						"value": "o"
					},
					{
						"type": "literal",
						"value": "p"
					},
					{
						"type": "literal",
						"value": "q"
					},
					{
						"type": "literal",
						"value": "r"
					},
					{
						"type": "literal",
						"value": "s"
					},
					{
						"type": "literal",
						"value": "t"
					},
					{
						"type": "literal",
						"value": "u"
					},
					{
						"type": "literal",
						"value": "v"
					},
					{
						"type": "literal",
						"value": "w"
					},
					{
						"type": "literal",
						"value": "x"
					},
					{
						"type": "literal",
						"value": "y"
					},
					{
						"type": "literal",
						"value": "z"
					},
					{
						"type": "literal",
						"value": "0"
					},
					{
						"type": "literal",
						"value": "1"
					},
					{
						"type": "literal",
						"value": "2"
					},
					{
						"type": "literal",
						"value": "3"
					},
					{
						"type": "literal",
						"value": "4"
					},
					{
						"type": "literal",
						"value": "5"
					},
					{
						"type": "literal",
						"value": "6"
					},
					{
						"type": "literal",
						"value": "7"
					},
					{
						"type": "literal",
						"value": "8"
					},
					{
						"type": "literal",
						"value": "9"
					},
					{
						"type": "literal",
						"value": "."
					},
					{
						"type": "literal",
						"value": ","
					},
					{
						"type": "literal",
						"value": ";"
					},
					{
						"type": "literal",
						"value": "="
					},
					{
						"type": "literal",
						"value": "+"
					},
					{
						"type": "literal",
						"value": "-"
					},
					{
						"type": "literal",
						"value": "["
					},
					{
						"type": "literal",
						"value": "]"
					},
					{
						"type": "literal",
						"value": "{"
					},
					{
						"type": "literal",
						"value": "}"
					},
					{
						"type": "literal",
						"value": "«"
					},
					{
						"type": "literal",
						"value": "»"
					},
					{
						"type": "literal",
						"value": "("
					},
					{
						"type": "literal",
						"value": ")"
					},
					{
						"type": "literal",
						"value": "/"
					},
					{
						"type": "literal",
						"value": "\\"
					},
					{
						"type": "literal",
						"value": "'"
					},
					{
						"type": "literal",
						"value": "`"
					},
					{
						"type": "literal",
						"value": "§"
					},
					{
						"type": "literal",
						"value": "^"
					},
					{
						"type": "literal",
						"value": "@"
					},
					{
						"type": "literal",
						"value": "$"
					},
					{
						"type": "literal",
						"value": "return"
					},
					{
						"type": "literal",
						"value": "delete"
					},
					{
						"type": "literal",
						"value": "deleteForward"
					},
					{
						"type": "literal",
						"value": "tab"
					},
					{
						"type": "literal",
						"value": "arrowUp"
					},
					{
						"type": "literal",
						"value": "arrowDown"
					},
					{
						"type": "literal",
						"value": "arrowLeft"
					},
					{
						"type": "literal",
						"value": "arrowRight"
					},
					{
						"type": "literal",
						"value": "pageUp"
					},
					{
						"type": "literal",
						"value": "pageDown"
					},
					{
						"type": "literal",
						"value": "home"
					},
					{
						"type": "literal",
						"value": "end"
					},
					{
						"type": "literal",
						"value": "space"
					},
					{
						"type": "literal",
						"value": "escape"
					},
					{
						"type": "literal",
						"value": "enter"
					},
					{
						"type": "literal",
						"value": "backspace"
					}
				]
			}
		},
		{
			"id": 46,
			"name": "KeyModifier",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Modifier of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "cmd"
					},
					{
						"type": "literal",
						"value": "ctrl"
					},
					{
						"type": "literal",
						"value": "opt"
					},
					{
						"type": "literal",
						"value": "shift"
					}
				]
			}
		},
		{
			"id": 64,
			"name": "LocalStorageValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported storage value types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  // String\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n\n  // Number\n  await setLocalStorageItem(\"fruit-basket-count\", 3);\n\n  // Boolean\n  await setLocalStorageItem(\"fruit-eaten-today\", true);\n};\n```\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					}
				]
			}
		},
		{
			"id": 653,
			"name": "Preferences",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A record type holding the preferences (entered in Raycast Preferences) that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 654,
						"name": "Preference"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 649,
			"name": "environment",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "Contains environment values such as the Raycast version, extension info, and paths.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { environment } from \"@raycast/api\";\n\nconsole.log(`Raycast version: ${environment.raycastVersion}`);\nconsole.log(`Extension name: ${environment.extensionName}`);\nconsole.log(`Command name: ${environment.commandName}`);\nconsole.log(`Assets path: ${environment.assetsPath}`);\nconsole.log(`Support path: ${environment.supportPath}`);\nconsole.log(`Is development mode: ${environment.isDevelopment}`);\n```\n"
					}
				]
			},
			"type": {
				"type": "reference",
				"id": 642,
				"name": "Environment"
			},
			"defaultValue": "..."
		},
		{
			"id": 665,
			"name": "preferences",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "Contains the preference values that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"id": 653,
				"name": "Preferences"
			},
			"defaultValue": "..."
		},
		{
			"id": 75,
			"name": "ActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 76,
					"name": "ActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Exposes a list of actions that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nOften items are context-aware, e.g. based on the selected list item. Actions can be grouped into semantic\nsection and can have keyboard shortcuts assigned.\n\nThe first and second action become the primary and secondary action. They get automatically the default keyboard shortcuts assigned.\nIn list and details, this is `↵` for the primary and `⌘` `↵` for the secondary action. In forms it's `⌘` `↵` for the primary and\n`⌘` `⇧` `↵` for the secondary.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction\n              title=\"Copy Pull Request URL\"\n              content=\"https://github.com/raycast/extensions/pull/1\"\n            />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 77,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 146,
								"name": "ActionPanelProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 146,
								"name": "ActionPanelProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 94,
			"name": "ActionPanelItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 95,
					"name": "ActionPanelItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A context-specific action that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nAssign keyboard shortcuts to items to make it easier for users to perform frequently used actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n            <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 96,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 152,
								"name": "ActionPanelItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 152,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 86,
			"name": "ActionPanelSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 87,
					"name": "ActionPanelSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of visually separated items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections if the {@link ActionPanel} contains a lot of actions to help guide the user to related actions.\nFor example, create a section for all copy actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Section title=\"Copy\">\n              <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n              <CopyToClipboardAction\n                title=\"Copy Pull Request URL\"\n                content=\"https://github.com/raycast/extensions/pull/1\"\n              />\n              <CopyToClipboardAction title=\"Copy Pull Request Title\" content=\"Docs: Update API Reference\" />\n            </ActionPanel.Section>\n            <ActionPanel.Section title=\"Danger zone\">\n              <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n            </ActionPanel.Section>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 88,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 149,
								"name": "ActionPanelSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 149,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 121,
			"name": "ActionPanelSubmenu",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 122,
					"name": "ActionPanelSubmenu",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action that shows more actions in a submenu.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is handy when an action needs to select from a range of options. For example, to add a label to a GitHub pull request\nor an assignee to a todo.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Submenu title=\"Add Label\">\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Red }}\n                title=\"Bug\"\n                onAction={() => console.log(\"Add bug label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Yellow }}\n                title=\"Enhancement\"\n                onAction={() => console.log(\"Add enhancement label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Blue }}\n                title=\"Help Wanted\"\n                onAction={() => console.log(\"Add help wanted label\")}\n              />\n            </ActionPanel.Submenu>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 123,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 159,
								"name": "ActionPanelSubmenuProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 152,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 535,
			"name": "CopyToClipboardAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 536,
					"name": "CopyToClipboardAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that copies the content to the clipboard.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed and a HUD is shown after the content was copied to the clipboard.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Press `⌘ + .` and share some love.\"\n      actions={\n        <ActionPanel>\n          <CopyToClipboardAction content=\"I ❤️ Raycast\" shortcut={{ modifiers: [\"cmd\"], key: \".\" }} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 537,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 538,
								"name": "CopyToClipboardActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 538,
								"name": "CopyToClipboardActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 165,
			"name": "Detail",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 166,
					"name": "Detail",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Renders a markdown (CommonMark) string.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nTypically used when navigating from a list or as standalone view.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return <Detail markdown=\"**Hello** _World_!\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Detail\n"
							}
						]
					},
					"parameters": [
						{
							"id": 167,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 175,
								"name": "DetailProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 175,
								"name": "DetailProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 181,
			"name": "Form",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 182,
					"name": "Form",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a list of form items such as {@link FormViewTextField}, {@link FormViewCheckbox} or {@link FormViewDropdown}.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 183,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 366,
								"name": "FormProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 366,
								"name": "FormProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 239,
			"name": "FormCheckbox",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 240,
					"name": "FormCheckbox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a checkbox.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Are you happy?\" defaultValue={true} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Do you like orange juice?\" value={checked} onChange={setChecked} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 241,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 401,
								"name": "FormCheckboxProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 401,
								"name": "FormCheckboxProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 256,
			"name": "FormDatePicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 257,
					"name": "FormDatePicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a date picker.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"dateOfBirth\" title=\"Date of Birth\" defaultValue={new Date(1955, 1, 24)} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [date, setDate] = useState<Date>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"launchDate\" title=\"Launch Date\" value={date} onChange={setDate} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 258,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 411,
								"name": "FormDatePickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 411,
								"name": "FormDatePickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 276,
			"name": "FormDropdown",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 277,
					"name": "FormDropdown",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a dropdown menu.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"emoji\" title=\"Favorite Emoji\" defaultValue=\"lol\">\n        <Form.Dropdown.Item value=\"poop\" title=\"Pile of poop\" icon=\"💩\" />\n        <Form.Dropdown.Item value=\"rocket\" title=\"Rocket\" icon=\"🚀\" />\n        <Form.Dropdown.Item value=\"lol\" title=\"Rolling on the floor laughing face\" icon=\"🤣\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [programmingLanguage, setProgrammingLanguage] = useState<string>(\"typescript\");\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown\n        id=\"dropdown\"\n        title=\"Favorite Language\"\n        value={programmingLanguage}\n        onChange={setProgrammingLanguage}\n      >\n        <Form.Dropdown.Item value=\"cpp\" title=\"C++\" />\n        <Form.Dropdown.Item value=\"javascript\" title=\"JavaScript\" />\n        <Form.Dropdown.Item value=\"ruby\" title=\"Ruby\" />\n        <Form.Dropdown.Item value=\"python\" title=\"Python\" />\n        <Form.Dropdown.Item value=\"swift\" title=\"Swift\" />\n        <Form.Dropdown.Item value=\"typescript\" title=\"TypeScript\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 278,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 421,
								"name": "FormDropdownProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 421,
								"name": "FormDropdownProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 302,
			"name": "FormDropdownItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 303,
					"name": "FormDropdownItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Represents a context-specific action that can be selected in the user interface or triggered through an assigned keyboard shortcut on the respective view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"icon\" title=\"Icon\">\n        <Form.Dropdown.Item value=\"circle\" title=\"Cirlce\" icon={Icon.Circle} />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 304,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 434,
								"name": "FormDropdownItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 434,
								"name": "FormDropdownItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 294,
			"name": "FormDropdownSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 295,
					"name": "FormDropdownSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Visually separated group of dropdown items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections to group related menu items together.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"food\" title=\"Favorite Food\">\n        <Form.Dropdown.Section title=\"Fruits\">\n          <Form.Dropdown.Item value=\"apple\" title=\"Apple\" icon=\"🍎\" />\n          <Form.Dropdown.Item value=\"banana\" title=\"Banana\" icon=\"🍌\" />\n        </Form.Dropdown.Section>\n        <Form.Dropdown.Section title=\"Vegetables\">\n          <Form.Dropdown.Item value=\"broccoli\" title=\"Broccoli\" icon=\"🥦\" />\n          <Form.Dropdown.Item value=\"carrot\" title=\"Carrot\" icon=\"🥕\" />\n        </Form.Dropdown.Section>\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 296,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 431,
								"name": "FormDropdownSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 431,
								"name": "FormDropdownSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 272,
			"name": "FormSeparator",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 273,
					"name": "FormSeparator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item that shows a separator line.\nUse for grouping and visually separating form items.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" />\n      <Form.Separator />\n      <Form.TextArea id=\"textarea\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 420,
								"name": "FormSeparatorProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 321,
			"name": "FormTagPicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 322,
					"name": "FormTagPicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a tag picker that allows the user to select multiple items.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"sports\" title=\"Favorite Sports\" defaultValue={[\"football\"]}>\n        <Form.TagPicker.Item value=\"basketball\" title=\"Basketball\" icon=\"🏀\" />\n        <Form.TagPicker.Item value=\"football\" title=\"Football\" icon=\"⚽️\" />\n        <Form.TagPicker.Item value=\"tennis\" title=\"Tennis\" icon=\"🎾\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [countries, setCountries] = useState<string[]>([\"ger\", \"ned\", \"pol\"]);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"countries\" title=\"Visited Countries\" value={countries} onChange={setCountries}>\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon=\"🇩🇪\" />\n        <Form.TagPicker.Item value=\"ind\" title=\"India\" icon=\"🇮🇳\" />\n        <Form.TagPicker.Item value=\"ned\" title=\"Netherlands\" icon=\"🇳🇱\" />\n        <Form.TagPicker.Item value=\"nor\" title=\"Norway\" icon=\"🇳🇴\" />\n        <Form.TagPicker.Item value=\"pol\" title=\"Poland\" icon=\"🇵🇱\" />\n        <Form.TagPicker.Item value=\"rus\" title=\"Russia\" icon=\"🇷🇺\" />\n        <Form.TagPicker.Item value=\"sco\" title=\"Scotland\" icon=\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 323,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "FormTagPickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 438,
								"name": "FormTagPickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 339,
			"name": "FormTagPickerItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 340,
					"name": "FormTagPickerItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A tag picker item in a {@link FormTagPicker}.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Color, Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"color\" title=\"Color\">\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 341,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 449,
								"name": "FormTagPickerItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 449,
								"name": "FormTagPickerItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 222,
			"name": "FormTextArea",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 223,
					"name": "FormTextArea",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text area for input.\nThe item supports multiline text entry.",
						"tags": [
							{
								"tag": "example",
								"text": "\nControlled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nconst DESCRIPTION =\n  \"We spend too much time starring at loading indicators. The Raycast team is dedicated to make everybody interact faster with their computers.\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"description\" defaultValue={DESCRIPTION} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nUncontrolled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"textarea\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 224,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 391,
								"name": "FormTextAreaProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 391,
								"name": "FormTextAreaProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 205,
			"name": "FormTextField",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 206,
					"name": "FormTextField",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text field for input.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"name\" defaultValue=\"Steve\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 207,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 381,
								"name": "FormTextFieldProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 381,
								"name": "FormTextFieldProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 453,
			"name": "List",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 454,
					"name": "List",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Displays {@link ListSection} or {@link ListItem}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe list uses built-in filtering by indexing the title of list items and additionally keywords.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Search Beers\" searchBarPlaceholder=\"Search your favorite beer\">\n      <List.Item title=\"Augustiner Helles\" />\n      <List.Item title=\"Camden Hells\" />\n      <List.Item title=\"Leffe Blonde\" />\n      <List.Item title=\"Sierra Nevada IPA\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 455,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 505,
								"name": "ListProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 505,
								"name": "ListProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 483,
			"name": "ListItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 484,
					"name": "ListItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A item in the {@link List}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is one of the foundational UI components of Raycast. A list item represents a single entity. It can be a\nGitHub pull request, a file or anything else. Most likely you want to perform actions on this item, so make it clear\nto the user what this list item is about.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item icon={Icon.Star} title=\"Augustiner Helles\" subtitle=\"0,5 Liter\" accessoryTitle=\"Germany\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 485,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 524,
								"name": "ListItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 524,
								"name": "ListItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 473,
			"name": "ListSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 474,
					"name": "ListSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of related {@link ListItem}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nSections are a great way to structure your list. F.e. group GitHub issues with the same status and order them by priority.\nThis way the user can quickly access what is most relevant.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Section title=\"Lager\">\n        <List.Item title=\"Camden Hells\" />\n      </List.Section>\n      <List.Section title=\"IPA\">\n        <List.Item title=\"Sierra Nevada IPA\" />\n      </List.Section>\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 475,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 519,
								"name": "ListSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 519,
								"name": "ListSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 546,
			"name": "OpenAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 547,
					"name": "OpenAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application, just as if you had double-clicked the\nfile's icon.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file was opened.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Check out your extension code.\"\n      actions={\n        <ActionPanel>\n          <OpenAction title=\"Open Folder\" target={__dirname} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 548,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 549,
								"name": "OpenActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 549,
								"name": "OpenActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 558,
			"name": "OpenInBrowserAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 559,
					"name": "OpenInBrowserAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that opens a URL in the default browser..",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the URL was opened in the browser.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Join the gang!\"\n      actions={\n        <ActionPanel>\n          <OpenInBrowserAction url=\"https://raycast.com/jobs\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 560,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 561,
								"name": "OpenInBrowserActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 561,
								"name": "OpenInBrowserActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 569,
			"name": "OpenWithAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 570,
					"name": "OpenWithAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe action opens a sub-menu with all applications that can open the file or folder.\nThe main window is closed after the file was opened in the specified application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenWithAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DESKTOP_DIR = `${homedir()}/Desktop`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"What do you want to use to open your desktop with?\"\n      actions={\n        <ActionPanel>\n          <OpenWithAction path={DESKTOP_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 571,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 572,
								"name": "OpenWithActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 572,
								"name": "OpenWithActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 580,
			"name": "PasteAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 581,
					"name": "PasteAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that pastes the content to the front-most applications.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the content was pasted to the front-most application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PasteAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Let us know what you think about the Raycast API?\"\n      actions={\n        <ActionPanel>\n          <PasteAction content=\"api@raycast.com\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 582,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 583,
								"name": "PasteActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 583,
								"name": "PasteActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 591,
			"name": "PushAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 592,
					"name": "PushAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to push a new view to the navigation stack.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PushAction } from \"@raycast/api\";\n\nfunction Ping() {\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <PushAction title=\"Push Pong\" target={<Pong />} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  return <Detail markdown=\"Pong\" />;\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 593,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 594,
								"name": "PushActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 594,
								"name": "PushActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 601,
			"name": "ShowInFinderAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 602,
					"name": "ShowInFinderAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that shows a file or folder in the Finder.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file or folder was revealed in the Finder.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, ShowInFinderAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DOWNLOADS_DIR = `${homedir()}/Downloads`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Are your downloads pilling up again?\"\n      actions={\n        <ActionPanel>\n          <ShowInFinderAction path={DOWNLOADS_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 603,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 604,
								"name": "ShowInFinderActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 604,
								"name": "ShowInFinderActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 612,
			"name": "SubmitFormAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 613,
					"name": "SubmitFormAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to add a submit handler for capturing form values.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 614,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 363,
								"name": "FormValues"
							},
							"default": {
								"type": "reference",
								"id": 363,
								"name": "FormValues"
							}
						}
					],
					"parameters": [
						{
							"id": 615,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 616,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 616,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 624,
			"name": "TrashAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 625,
					"name": "TrashAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that moves a file or folder to the Trash.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, TrashAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst FILE = `${homedir()}/Downloads/get-rid-of-me.txt`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Some spring cleaning?\"\n      actions={\n        <ActionPanel>\n          <TrashAction paths={FILE} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 626,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 627,
								"name": "TrashActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 627,
								"name": "TrashActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 48,
			"name": "allLocalStorageItems",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 49,
					"name": "allLocalStorageItems",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve all stored values in the local storage of an extension.",
						"returns": "A promise that resolves with an object containing all {@link LocalStorageValues}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { allLocalStorageItems } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  priority: number;\n}\n\nexport default async () => {\n  const items: Values = await allLocalStorageItems();\n  console.log(`Local storage item count: ${Object.entries(items).length}`);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 50,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 65,
								"name": "LocalStorageValues"
							},
							"default": {
								"type": "reference",
								"id": 65,
								"name": "LocalStorageValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Values"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 35,
			"name": "clearClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 36,
					"name": "clearClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clears the current clipboard contents.",
						"returns": "A promise that resolves when the clipboard is cleared.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await clearClipboard();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 62,
			"name": "clearLocalStorage",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 63,
					"name": "clearLocalStorage",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes all stored values of an extension.",
						"returns": "A promise that resolves when all values were removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearLocalStorage } from \"@raycast/api\";\n\nexport default async () => {\n  await clearLocalStorage();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 11,
			"name": "clearSearchBar",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 12,
					"name": "clearSearchBar",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clear the text in the search bar.",
						"returns": "A promise that resolves when the search bar is cleared.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 13,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "Can be used to force scrolling to the top. Defaults to scrolling to the top after the\nthe search bar was cleared."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 14,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 15,
											"name": "forceScrollToTop",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "closeMainWindow",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "closeMainWindow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Closes the main Raycast window.",
						"returns": "A promise that resolves when the main window is closed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { closeMainWindow } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  await setTimeout(1000);\n  await closeMainWindow({ clearRootSearch: true });\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "Can be used to clear the root search. Defaults to not clearing the root search after\nthe window was closed."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 5,
											"name": "clearRootSearch",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 32,
			"name": "copyTextToClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 33,
					"name": "copyTextToClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies text to the clipboard.",
						"returns": "A promise that resolves when the text got copied to the clipboard.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { copyTextToClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await copyTextToClipboard(\"https://raycast.com\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 34,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The text to copy to the clipboard."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 22,
			"name": "getApplications",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 23,
					"name": "getApplications",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns all applications that can open the file.",
						"returns": "An array of {@link Application}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getApplications } from \"@raycast/api\";\n\nexport default async () => {\n  const installedApplications = await getApplications();\n  console.log(\"The following applications are installed on your Mac:\");\n  console.log(installedApplications.map((a) => a.name).join(\", \"));\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 24,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "The path of the file or folder to get the applications for. If no path is specified, all installed applications are returned."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 28,
									"name": "Application"
								}
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 25,
			"name": "getDefaultApplication",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 26,
					"name": "getDefaultApplication",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the default application that the file would be opened with.",
						"returns": "The default {@link Application} that would open the file. Throws an error if no application was found.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getDefaultApplication } from \"@raycast/api\";\n\nexport default async () => {\n  const defaultApplication = await getDefaultApplication(__filename);\n  console.log(`Default application for JavaScript is: ${defaultApplication.name}`);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 27,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The path of the file or folder to get the default application for."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 28,
								"name": "Application"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 51,
			"name": "getLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 52,
					"name": "getLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve the stored value for the given key.",
						"returns": "A promise that resolves with the the stored value for the given key. If the key does not exist, `undefined` is returned.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  const item: string = await getLocalStorageItem(\"favorite-fruit\");\n  console.log(item);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 53,
							"name": "Value",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							},
							"default": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							}
						}
					],
					"parameters": [
						{
							"id": 54,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The key you want to retrieve the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Value"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 650,
			"name": "getPreferenceValues",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 651,
					"name": "getPreferenceValues",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A convenience function for type-safe access to the values of the {@link preferences} object.",
						"returns": "An object with the preference names as property key and the typed value as property value.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nEach preference name is mapped to its value and the defined default values are used as fallback values.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  name: string;\n  bodyWeight?: string;\n  bodyHeight?: string;\n}\n\nexport default async () => {\n  const preferences: Preferences = getPreferenceValues();\n  console.log(preferences);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 652,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 666,
								"name": "PreferenceValues"
							},
							"default": {
								"type": "reference",
								"id": 666,
								"name": "PreferenceValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "Values"
					}
				}
			]
		},
		{
			"id": 40,
			"name": "getSelectedText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 41,
					"name": "getSelectedText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets the selected text of the frontmost application.",
						"returns": "Returns a promise that resolves with the selected text.\n",
						"tags": [
							{
								"tag": "throws",
								"text": "An error when no text is selected in the frontmost application."
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getSelectedText, pasteText, showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  try {\n    const selectedText = await getSelectedText();\n    const transformedText = selectedText.toUpperCase();\n    await pasteText(transformedText);\n  } catch (error) {\n    await showToast(ToastStyle.Failure, \"Cannot transform text\", String(error));\n  }\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 37,
			"name": "pasteText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 38,
					"name": "pasteText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pastes text to the current selection of the frontmost application.",
						"returns": "A promise that resolves when the text got pasted.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText } from \"@raycast/api\";\n\nexport default async () => {\n  await pasteText(\"I really like Raycast's API\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 39,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The text to insert at the cursor."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 6,
			"name": "popToRoot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 7,
					"name": "popToRoot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pops the navigation stack back to root search.",
						"returns": "A promise that resolves when Raycast popped to root.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, popToRoot } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport { setTimeout } from \"timers\";\n\nexport default function Command() {\n  useEffect(() => {\n    setTimeout(() => {\n      popToRoot({ clearSearchBar: true });\n    }, 3000);\n  }, []);\n\n  return <Detail markdown=\"See you soon 👋\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 8,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "Can be used to clear the search bar. Defaults to clearing the search bar after popped to root."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 9,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 10,
											"name": "clearSearchBar",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												10
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 815,
			"name": "randomId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 816,
					"name": "randomId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generate secure URL-friendly unique ID.",
						"text": "By default, the ID will have 21 symbols to have a collision probability\nsimilar to UUID v4.\n",
						"returns": "A random string.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText, randomId } from \"@raycast/api\";\n\nexport default async () => {\n  const id = randomId();\n  await pasteText(id);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 817,
							"name": "size",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "Size of the ID. The default size is 21."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 59,
			"name": "removeLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 60,
					"name": "removeLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes the stored value for the given key.",
						"returns": "A promise that resolves when the value was removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { removeLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await removeLocalStorageItem(\"favorite-fruit\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 61,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The key you want to remove the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 689,
			"name": "render",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 690,
					"name": "render",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Takes a React Components and renders it in Raycast for command types that show a `view`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\"\nconst Command = () => <Detail markdown=\"Hello World\" />\nrender(<Command />)\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Rendering\n"
							}
						]
					},
					"parameters": [
						{
							"id": 691,
							"name": "nodeToRender",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 55,
			"name": "setLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 56,
					"name": "setLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Stores a value for the given key.",
						"returns": "A promise that resolves when the value was stored.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 57,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The key you want to create or update the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 58,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The value you want to create or update for the given key."
							},
							"type": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 781,
			"name": "showHUD",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 782,
					"name": "showHUD",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A HUD will automatically hide the main window and show a compact Toast at the bottom of the screen.",
						"returns": "A promise that resolves when the HUD is shown.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showHUD } from \"@raycast/api\";\n\nexport default async () => {\n  await showHUD(\"Hey there 👋\");\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 783,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The title that will be displayed for the HUD."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 16,
			"name": "showInFinder",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 17,
					"name": "showInFinder",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a file or directory in the Finder.",
						"returns": "A promise that resolves when item is revealed in the Finder.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showInFinder } from \"@raycast/api\"\nimport { homedir } from \"os\"\nshowInFinder(homedir(), \"Downloads\")\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 18,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The path to show in the Finder."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 776,
			"name": "showToast",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 777,
					"name": "showToast",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates and shows a Toast with the the given style, title, and message.",
						"returns": "A promise that resolves with the shown toast. The toast can be used to change or hide it.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const success = false;\n\n  if (success) {\n    await showToast(ToastStyle.Success, \"Dinner is ready\", \"Pizza margherita\");\n  } else {\n    await showToast(ToastStyle.Failure, \"Dinner isn't ready\", \"Pizza dropped on the floor\");\n  }\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 778,
							"name": "style",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The visual style of the Toast."
							},
							"type": {
								"type": "reference",
								"id": 811,
								"name": "ToastStyle"
							}
						},
						{
							"id": 779,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The title that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 780,
							"name": "message",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "The message that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 784,
								"name": "Toast"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 19,
			"name": "trash",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 20,
					"name": "trash",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Moves a file or director to the Trash.",
						"returns": "A promise that resolves when all files are moved to the trash.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { trash } from \"@raycast/api\";\nimport { writeFile } from \"fs/promises\";\nimport { homedir } from \"os\";\n\nexport default async () => {\n  const file = `${homedir()}/Desktop/yolo.txt`;\n  await writeFile(file, \"I will be deleted soon!\");\n  await trash(file);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 21,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "PathLike"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "PathLike"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 669,
			"name": "useActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 670,
					"name": "useActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you update the global Action Panel.",
						"returns": "A {@link ActionPanelActions} object with an {@link ActionPanelHook.update} function.\nUse the function to update the global Action Panel.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 671,
						"name": "ActionPanelState"
					}
				}
			]
		},
		{
			"id": 675,
			"name": "useId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 676,
					"name": "useId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generates a memoized random ID.",
						"returns": "The an string ID that is either the `defaultId` if provided, or a randomly generated ID with\nthe `generateId` function.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe generated ID is preserved across renders. It's used internally to generate fallback ID's\nfor {@link List.Section} or {@link List.Item}. The generated ID is saved as React `ref` and\nwon't change unless the React component is unmounted.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, useId } from \"@raycast/api\";\n\nexport default function Command() {\n  const id = useId();\n  console.log(id);\n  return <Detail key={id} markdown=\"I remember you 🧠\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Utilities\n"
							}
						]
					},
					"parameters": [
						{
							"id": 677,
							"name": "defaultId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "The ID that is returned by default."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 678,
							"name": "generateId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "A function that is used to generate a random ID. Uses {@link randomId} by default."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 679,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 680,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "..."
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 681,
			"name": "useNavigation",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 682,
					"name": "useNavigation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you push and pop view components in the navigation stack.",
						"returns": "A {@link Navigation} object with {@link Navigation.push} and {@link Navigation.pop} functions.\nUse the functions to alter the navigation stack.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMost likely you won't use this hook too often. To push a new component, use the {@link PushAction}.\nWhen a user presses `ESC`, we automatically push to the previous component.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, useNavigation } from \"@raycast/api\";\n\nfunction Ping() {\n  const { push } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Push\" onAction={() => push(<Pong />)} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  const { pop } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Pong\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Pop\" onAction={pop} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Navigation\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 683,
						"name": "Navigation"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 2,
			"children": [
				78,
				97,
				89,
				124,
				168,
				184,
				242,
				259,
				279,
				305,
				297,
				274,
				324,
				342,
				225,
				208,
				73,
				456,
				486,
				476
			]
		},
		{
			"title": "Enumerations",
			"kind": 4,
			"children": [
				698,
				713,
				773,
				811
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				784
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				152,
				146,
				149,
				671,
				159,
				28,
				538,
				175,
				642,
				762,
				401,
				411,
				434,
				421,
				431,
				371,
				366,
				420,
				449,
				438,
				391,
				381,
				363,
				765,
				42,
				524,
				505,
				519,
				65,
				683,
				549,
				561,
				572,
				583,
				654,
				666,
				594,
				604,
				616,
				807,
				627
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				144,
				145,
				709,
				358,
				764,
				769,
				47,
				46,
				64,
				653
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				649,
				665
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				75,
				94,
				86,
				121,
				535,
				165,
				181,
				239,
				256,
				276,
				302,
				294,
				272,
				321,
				339,
				222,
				205,
				453,
				483,
				473,
				546,
				558,
				569,
				580,
				591,
				601,
				612,
				624,
				48,
				35,
				62,
				11,
				1,
				32,
				22,
				25,
				51,
				650,
				40,
				37,
				6,
				815,
				59,
				689,
				55,
				781,
				16,
				776,
				19,
				669,
				675,
				681
			]
		}
	],
	"categories": [
		{
			"title": "User Interface",
			"children": [
				698,
				713,
				773,
				811,
				784,
				152,
				146,
				149,
				671,
				159,
				538,
				175,
				762,
				401,
				411,
				434,
				421,
				431,
				371,
				366,
				420,
				449,
				438,
				391,
				381,
				363,
				765,
				524,
				505,
				519,
				683,
				549,
				561,
				572,
				583,
				594,
				604,
				616,
				807,
				627,
				144,
				145,
				709,
				358,
				764,
				769,
				75,
				94,
				86,
				121,
				535,
				165,
				181,
				239,
				256,
				276,
				302,
				294,
				272,
				321,
				339,
				222,
				205,
				453,
				483,
				473,
				546,
				558,
				569,
				580,
				591,
				601,
				612,
				624,
				11,
				1,
				6,
				689,
				781,
				776,
				669,
				675,
				681
			]
		},
		{
			"title": "Keyboard",
			"children": [
				42,
				47,
				46
			]
		},
		{
			"title": "Clipboard",
			"children": [
				35,
				32,
				40,
				37
			]
		},
		{
			"title": "Storage",
			"children": [
				65,
				64,
				48,
				62,
				51,
				59,
				55
			]
		},
		{
			"title": "Environment",
			"children": [
				642,
				649
			]
		},
		{
			"title": "Other",
			"children": [
				78,
				97,
				89,
				124,
				168,
				184,
				242,
				259,
				279,
				305,
				297,
				274,
				324,
				342,
				225,
				208,
				73,
				456,
				486,
				476
			]
		},
		{
			"title": "Preferences",
			"children": [
				654,
				666,
				653,
				665,
				650
			]
		},
		{
			"title": "Utilities",
			"children": [
				28,
				22,
				25,
				815,
				16,
				19
			]
		}
	]
}